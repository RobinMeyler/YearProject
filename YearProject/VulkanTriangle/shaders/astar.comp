// Author: Robin Meyler
// Date: 2020/2021

#version 450
// Individual node information
struct Node{
	float costToGoal;
	float totalCostFromStart;
	float totalCostAccumlative;
	int marked;		// Has been reached yet or not
	int passable;
	int ID;
	int previousID;		// Previous id for finding path
	int arcIDs[4];		// 4 neighbours in grid by ID
};

// Per invocation node data
struct NodeData{
	int start;		// Start ID
	int goal;		// Goal ID
	Node nodes[62500];
};
// List for paths
struct Path{
    int pathList[1000];
};

// Workgroup count on the x dimenion
layout (local_size_x = 1) in;		
// Storage buffer objects to pass in data and read from after the computation
layout(std430, set=0, binding=0) buffer inA { NodeData nd[]; };
layout(std430, set=0, binding=1) buffer outR { Path paths[]; };

int pq[5];
int count = 0;
// Checks how many members of the Queue are actual entries
int queueSize()
{
	int size = 0;
	for(int s = 0; s < 5; s++)
	{
		if(pq[s] != -1)
		{
			size++;
		}	
	}
	return size;
}
// Pops the top memeber from the queue
void pop(const uint index)
{
	// Push every entry up 1 in the queue
	for(int j = 0; j < 4; j++)
	{
		pq[j] = pq[j+1];
	}
	pq[4] = -1; // Empty
}

// Push function that checks value of nodes accumulaed cost compared to those in the queue and places it
// Takes in invocation index and nodeID of the node it wishes to queue
void push(const uint index, int nodeID)
{	
	for(int j = 1; j < 5; j++) 		// Starts at one not to replce the top of the queue being [0]
	{
		if(pq[j] != -1) 		// If it reachs 0, we can place it here as there is no entry
		{
			if(nd[index].nodes[pq[j]].totalCostAccumlative > nd[index].nodes[nodeID].totalCostAccumlative )
			{	
			
				int temp = j;
				for(int t = 4; t > 1; t--)  // Starts from the end and moves back so it doesn't overwrite the data it needs
				{
					if((t) == (temp))		// If it meets its new position going backward, we have updated every node that needs it
					{
						break;
					}
					pq[t] = pq[t-1]; 	// Queue entry gets pushed back in the queue
				}
				pq[j] = nodeID;			// Once the rest of the queue has been update, set the new position of the push
				return;
			}
		}
		else
		{
			count++;
			pq[j] = nodeID;
			return;
		}
	}
	pq[4] = nodeID;
	return;
}

void main(){ 
	// Find which invocation this is
	const uint index = gl_GlobalInvocationID.x;

	// Set all in the queue to -1 for reference
	for(int j = 0; j < 5; j++)
	{
		pq[j] = -1;
	}

	// Set up the start node for the queue
	pq[0] = nd[index].start;
	nd[index].nodes[pq[0]].totalCostFromStart = 0;
	nd[index].nodes[pq[0]].marked = 1;
	nd[index].nodes[pq[0]].totalCostAccumlative = nd[index].nodes[pq[0]].totalCostFromStart + nd[index].nodes[pq[0]].costToGoal;
	
	// A* with queuing
	while(queueSize() > 0)
	{
		// Loop each of the arcs
		for(int g = 0; g < 4; g++)
		{
			// Find Arc's ID of the top node in queue 1->4
			int arc = nd[index].nodes[pq[0]].arcIDs[g];
			
			// No neighbour
			if(arc == -1)
			{
				continue;
			}
			// If it is not passable, continue;
			if(nd[index].nodes[arc].passable == 0)
			{
				continue;
			}
			
			// Get distance of arc
			float childDistance = nd[index].nodes[arc].costToGoal + nd[index].nodes[pq[0]].totalCostFromStart + 2;
			
			// If the arc is worth updating
			// 1) Update its total cost 2) Its cost from start 3) Set it's previous Id for the Path
			if(childDistance < nd[index].nodes[arc].totalCostAccumlative)
			{
				nd[index].nodes[arc].totalCostAccumlative = childDistance;
				nd[index].nodes[arc].totalCostFromStart = nd[index].nodes[pq[0]].totalCostFromStart + 2;
				nd[index].nodes[arc].previousID = pq[0];
			}
			// If it hasn't been marked yet
			if(nd[index].nodes[arc].marked == 0)
			{
				push(index, arc);	
				nd[index].nodes[arc].marked = 1;
			}
		}
		// Pop top from Queue
		pop(index);
	}

	// Make path for each invocation
	// Start at the goal and cycle back through till the start is reached
	int loop = nd[index].goal;
	for(int t = 0; t < 1000; t++)
	{
		loop = nd[index].nodes[loop].previousID;
		if(loop != -1)
		{
			paths[index].pathList[t] = nd[index].nodes[loop].ID;  // Updates the corrosponding inovation
		}	
		else
		{
			break;
		}
	}	
	nd[index].nodes[0].totalCostFromStart = count;
}